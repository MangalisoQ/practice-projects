services:
  frontend-service:
    build: ./frontend
    image: frontend
    command: npm run dev
    container_name: frontend
    ports:
      - 5173:5173
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules        # preserve node_modules in container
    networks:
      - webnet
  backend-service:
    build: ./backend
    image: backend
    command: nodemon ./backend/index.js 3000
    container_name: backend
    ports:
      - 3000:3000
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules        # preserve node_modules in container
    networks:
      - webnet
  nginx-service:
    image: nginx:1.26-alpine
    container_name: nginx
    ports:
      - 80:80
    volumes:
      - ./backend/nginx-conf/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - webnet

  mongo:
    image: mongo
    restart: always
    container_name: mongo-db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    networks:
      - webnet
    volumes:
      - database:/data/db

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
      ME_CONFIG_BASICAUTH: false
    depends_on:
      - mongo
    networks:
      - webnet

networks:
  webnet:

volumes:
  database:

